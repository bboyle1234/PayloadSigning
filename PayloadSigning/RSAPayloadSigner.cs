using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace PayloadSigning {

    /// <summary>
    /// Use this class to sign byte arrays with a signature generated from an RSA key pair.
    /// </summary>
    public class RSAPayloadSigner : IPayloadSigner, IDisposable {

        /// <summary>
        /// The length of the signature generated by the rsa algorithm.
        /// </summary>
        const int SIGNATURE_LENTH = 128;

        static readonly string hashAlgorithmName = CryptoConfig.MapNameToOID("SHA512");

        /// <summary>
        /// Generates signatures using the private rsa key
        /// </summary>
        readonly RSACryptoServiceProvider rsaPrivate;

        /// <summary>
        /// Verifies signatures using the public rsa key
        /// </summary>
        readonly RSACryptoServiceProvider rsaPublic;

        public RSAPayloadSigner(string privateRSAKeyXML, string publicRSAKeyXML) {

            // create the rsa encryption object that is used for signature generation using private key
            rsaPrivate = new RSACryptoServiceProvider();
            rsaPrivate.FromXmlString(privateRSAKeyXML);

            // creates the rsa encryption object that is used for signature verification using public key
            rsaPublic = new RSACryptoServiceProvider();
            rsaPublic.FromXmlString(publicRSAKeyXML);
        }

        public byte[] Sign(byte[] payload) {
            var signature = rsaPrivate.SignData(payload, hashAlgorithmName);
            return ArrayUtilities.Concatenate(payload, signature);
        }

        public bool TryVerifySignature(byte[] signedPayload, out byte[] payload) {
            byte[] signature;
            ArrayUtilities.Split(signedPayload, signedPayload.Length - SIGNATURE_LENTH, out payload, out signature);
            return rsaPublic.VerifyData(payload, hashAlgorithmName, signature);
        }

        public void Dispose() {

            if (null != rsaPrivate)
                rsaPrivate.Dispose();

            if (null != rsaPublic)
                rsaPublic.Dispose();
        }
    }
}
